{"version":3,"sources":["17_CS_cityIO_Frontend/scripts/2d.js"],"names":["svgContainer","typeId","drawJSON","json","treeMap","google","charts","load","setOnLoadCallback","drawChart","data","visualization","DataTable","addColumn","gridWithTypes","JSON","parse","stringify","grid","forEach","cell","index","type","value","objects","density","x","y","rot","label","color","globalColors","addRows","console","log","tree","TreeMap","document","getElementById","draw","minColor","midColor","maxColor","headerHeight","fontColor","showScale","circleGrid","d3Grid","divHeight","offsetHeight","divWidth","offsetWidth","d3","select","append","circles","selectAll","enter","circlesLocation","attr","d","Math","sqrt","length","circlesAttr","style","transition","duration","pieChart","resCount","officeCount","pieGrid"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAIA,YAAJ;AACA,IAAIC,SAAS,CACT,SADS,EAET,MAFS,EAGT,mBAHS,EAIT,oBAJS,EAKT,mBALS,EAMT,cANS,EAOT,eAPS,EAQT,cARS,EAST,MATS,EAUT,WAVS,EAWT,MAXS,CAAb;;AAcA;AACA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACpB;AACA;AACAC,YAAQD,IAAR;AACH;;AAED;AACA;AACA;AACA,SAASC,OAAT,CAAiBD,IAAjB,EAAuB;;AAEnB;AACAE,WAAOC,MAAP,CAAcC,IAAd,CAAmB,SAAnB,EAA8B;AAC1B,oBAAY,CAAC,SAAD;AADc,KAA9B;;AAIAF,WAAOC,MAAP,CAAcE,iBAAd,CAAgCC,SAAhC;;AAGA,aAASA,SAAT,GAAqB;;AAEjB,YAAIC,OAAO,IAAIL,OAAOM,aAAP,CAAqBC,SAAzB,EAAX;AACA;AACAF,aAAKG,SAAL,CAAe,QAAf,EAAyB,OAAzB;AACAH,aAAKG,SAAL,CAAe,QAAf,EAAyB,OAAzB;;AAEA;AACAC,wBAAgBC,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAed,KAAKe,IAApB,CAAX,CAAhB;AACAJ,sBAAcK,OAAd,CAAsB,UAAUC,IAAV,EAAgBC,KAAhB,EAAuB;AACzC;AACA,gBAAID,KAAKE,IAAL,GAAY,CAAC,CAAb,IAAkBF,KAAKE,IAAL,GAAY,CAAlC,EAAqC;AACjC;AACAF,qBAAKG,KAAL,GAAapB,KAAKqB,OAAL,CAAaC,OAAb,CAAqBL,KAAKE,IAA1B,CAAb;AACH,aAHD,MAGO;AACH;AACAF,qBAAKG,KAAL,GAAa,CAAb;AACH;AACDH,iBAAKE,IAAL,GAAYF,KAAKE,IAAL,GAAY,CAAxB;AACA;AACA,mBAAOF,KAAKM,CAAZ;AACA,mBAAON,KAAKO,CAAZ;AACA,mBAAOP,KAAKQ,GAAZ;AACA;AACAR,iBAAKS,KAAL,GAAa5B,OAAOmB,KAAKE,IAAZ,CAAb;AACAF,iBAAKU,KAAL,GAAaC,aAAaX,KAAKE,IAAlB,CAAb;AACA,mBAAOF,KAAKE,IAAZ;AACA;AACAZ,iBAAKsB,OAAL,CAAa,CACT,CAACZ,KAAKS,KAAN,EAAaT,KAAKG,KAAlB,CADS,CAAb;AAGH,SAtBD;;AAwBAU,gBAAQC,GAAR,CAAYxB,IAAZ;;AAEA;AACAyB,eAAO,IAAI9B,OAAOM,aAAP,CAAqByB,OAAzB,CAAiCC,SAASC,cAAT,CAAwB,IAAxB,CAAjC,CAAP;AACAH,aAAKI,IAAL,CAAU7B,IAAV,EAAgB;AACZ8B,sBAAU,MADE;AAEZC,sBAAU,MAFE;AAGZC,sBAAU,MAHE;AAIZC,0BAAc,EAJF;AAKZC,uBAAW,OALC;AAMZC,uBAAW;AANC,SAAhB;AAQH;AACJ;;AAGD;AACA;AACA;AACA,SAASC,UAAT,CAAoB3C,IAApB,EAA0B;;AAEtB4C,aAAShC,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAed,KAAKe,IAApB,CAAX,CAAT;;AAEA;AACA;AACA6B,WAAO5B,OAAP,CAAe,UAAUC,IAAV,EAAgBC,KAAhB,EAAuB;AAClC,eAAOD,KAAKQ,GAAZ,CADkC,CACjB;AACjB,YAAIR,KAAKE,IAAL,GAAY,CAAC,CAAb,IAAkBF,KAAKE,IAAL,GAAY,CAAlC,EAAqC;AAAE;AACnCF,iBAAKG,KAAL,GAAapB,KAAKqB,OAAL,CAAaC,OAAb,CAAqBL,KAAKE,IAA1B,CAAb,CADiC,CACa;AACjD,SAFD,MAEO;AACHF,iBAAKG,KAAL,GAAa,CAAb,CADG,CACa;AACnB;AACJ,KAPD;;AASA;;AAEA,QAAIyB,YAAYX,SAASC,cAAT,CAAwB,OAAxB,EAAiCW,YAAjD;AACA,QAAIC,WAAWb,SAASC,cAAT,CAAwB,OAAxB,EAAiCa,WAAhD;;AAEA;AACA;AACAnD,mBAAeoD,GAAGC,MAAH,CAAU,QAAV,EAAoBC,MAApB,CAA2B,KAA3B,CAAf;AACA,QAAIC,UAAUvD,aAAawD,SAAb,CAAuB,QAAvB,EACT9C,IADS,CACJqC,MADI,EAETU,KAFS,GAGTH,MAHS,CAGF,QAHE,CAAd;;AAMA,QAAII,kBAAkBH,QACjBI,IADiB,CACZ,IADY,EACN,UAAUC,CAAV,EAAa;AACrB,eAAO,MAAMZ,SAAN,GAAkBa,KAAKC,IAAL,CAAUf,OAAOgB,MAAjB,CAAlB,GAA8CH,EAAElC,CAAvD;AACH,KAHiB,EAIjBiC,IAJiB,CAIZ,IAJY,EAIN,UAAUC,CAAV,EAAa;AACrB,eAAO,MAAMV,QAAN,GAAiBW,KAAKC,IAAL,CAAUf,OAAOgB,MAAjB,CAAjB,GAA6CH,EAAEjC,CAAtD;AACH,KANiB,CAAtB;;AAQA,QAAIqC,cAAcT,QACbU,KADa,CACP,MADO,EACC,UAAUL,CAAV,EAAa;AACxB,YAAI9B,QAAQC,aAAa6B,EAAEtC,IAAF,GAAS,CAAtB,CAAZ;AACA,eAAOQ,KAAP;AAEH,KALa,EAKX;AALW,KAMbmC,KANa,CAMP,QANO,EAMG,MANH,EAObC,UAPa,GAQbC,QARa,CAQJ,IARI,EASbR,IATa,CASR,GATQ,EASH,UAAUC,CAAV,EAAa;AACpB,YAAIA,EAAErC,KAAF,GAAU,CAAd,EAAiB;AACb,mBAAOqC,EAAErC,KAAF,GAAU,CAAjB;AACH,SAFD,MAGI,OAAOqC,EAAErC,KAAT;AACP,KAda,CAAlB;AAeH;;AAED;AACA;AACA;;AAEA,SAAS6C,QAAT,CAAkBjE,IAAlB,EAAwB;AACpB,QAAIkE,WAAW,CAAf;AAAA,QACIC,cAAc,CADlB;;AAGAC,cAAUxD,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAed,KAAKe,IAApB,CAAX,CAAV;AACAqD,YAAQpD,OAAR,CAAgB,UAAUC,IAAV,EAAgBC,KAAhB,EAAuB;AACnC,eAAOD,KAAKQ,GAAZ,CADmC,CAClB;AACjB,eAAOR,KAAKM,CAAZ,CAFmC,CAEpB;AACf,eAAON,KAAKO,CAAZ,CAHmC,CAGpB;AACf;AACAP,aAAKS,KAAL,GAAa5B,OAAOmB,KAAKE,IAAL,GAAY,CAAnB,CAAb,CALmC,CAKC;;AAEpC,YAAIF,KAAKE,IAAL,GAAY,CAAZ,IAAiBF,KAAKE,IAAL,GAAY,CAAjC,EAAoC;AAChC+C,uBAAWA,WAAW,CAAtB;AACH,SAFD,MAEO,IAAIjD,KAAKE,IAAL,GAAY,CAAZ,IAAiBF,KAAKE,IAAL,GAAY,CAAjC,EAAoC;AACvCgD,0BAAcA,cAAc,CAA5B;AACH;AACJ,KAZD;AAaH","file":"2d.d9a42bcb.map","sourcesContent":["var svgContainer;\nvar typeId = [\n    'PARKING',\n    'PARK',\n    'Residential Large',\n    'Residential Medium',\n    'Residential Small',\n    'Office Large',\n    'Office Medium',\n    'Office Small',\n    'ROAD',\n    'AMENITIES',\n    'MISC'\n]\n\n// draw to SVG container \nfunction drawJSON(json) {\n    // circleGrid(json);\n    // pieChart(json);\n    treeMap(json);\n}\n\n/////////////////////////////////////////////////\n///////////////d3 plus treemap //////////////////\n/////////////////////////////////////////////////\nfunction treeMap(json) {\n\n    //drawing treemap \n    google.charts.load('current', {\n        'packages': ['treemap']\n    });\n\n    google.charts.setOnLoadCallback(drawChart);\n\n\n    function drawChart() {\n\n        var data = new google.visualization.DataTable();\n        // Declare columns\n        data.addColumn('string', 'label');\n        data.addColumn('number', 'value');\n\n        // Data prep\n        gridWithTypes = JSON.parse(JSON.stringify(json.grid));\n        gridWithTypes.forEach(function (cell, index) {\n            //building types in data \n            if (cell.type > -1 && cell.type < 6) {\n                //make 'Value' term for Desity\n                cell.value = json.objects.density[cell.type];\n            } else {\n                //if this cell is not a type, give it an arb. value\n                cell.value = 1;\n            }\n            cell.type = cell.type + 2;\n            //removes useless data \n            delete cell.x;\n            delete cell.y;\n            delete cell.rot;\n            //make 'Value' term for Desity\n            cell.label = typeId[cell.type];\n            cell.color = globalColors[cell.type];\n            delete cell.type;\n            // Add data\n            data.addRows([\n                [cell.label, cell.value]\n            ]);\n        });\n\n        console.log(data)\n\n        // draw\n        tree = new google.visualization.TreeMap(document.getElementById('2d'));\n        tree.draw(data, {\n            minColor: '#f00',\n            midColor: '#ddd',\n            maxColor: '#0d0',\n            headerHeight: 15,\n            fontColor: 'black',\n            showScale: true\n        });\n    }\n}\n\n\n/////////////////////////////////////////////////\n///////////////d3 Grid Visulazation /////////////\n/////////////////////////////////////////////////\nfunction circleGrid(json) {\n\n    d3Grid = JSON.parse(JSON.stringify(json.grid));\n\n    // this loop pushes value data from json.object field to each \n    // x,y gridcell so that d3 could use this data\n    d3Grid.forEach(function (cell, index) {\n        delete cell.rot; //removes useless data \n        if (cell.type > -1 && cell.type < 6) { //building types in data \n            cell.value = json.objects.density[cell.type]; //make 'Value' term for Desity, so d3plus will fill good \n        } else {\n            cell.value = 1; //if this cell is not a type, give it an arb. value\n        }\n    });\n\n    ///////////////////////////////////////////////////////\n\n    var divHeight = document.getElementById(\"d3Div\").offsetHeight;\n    var divWidth = document.getElementById(\"d3Div\").offsetWidth;\n\n    //Draw CS grid \n    // load SVG container on load of page \n    svgContainer = d3.select(\"#d3Div\").append(\"svg\");\n    var circles = svgContainer.selectAll(\"circle\")\n        .data(d3Grid)\n        .enter()\n        .append(\"circle\");\n\n\n    var circlesLocation = circles\n        .attr(\"cx\", function (d) {\n            return 0.9 * divHeight / Math.sqrt(d3Grid.length) * (d.x);\n        })\n        .attr(\"cy\", function (d) {\n            return 0.9 * divWidth / Math.sqrt(d3Grid.length) * (d.y);\n        });\n\n    var circlesAttr = circles\n        .style(\"fill\", function (d) {\n            var color = globalColors[d.type + 2];\n            return color;\n\n        }) // set the fill colour \n        .style(\"stroke\", \"none\")\n        .transition()\n        .duration(1000)\n        .attr(\"r\", function (d) {\n            if (d.value > 1) {\n                return d.value / 5;\n            } else\n                return d.value;\n        })\n}\n\n/////////////////////////////////////////////////\n////////////////////////////pie chart //////////\n/////////////////////////////////////////////////\n\nfunction pieChart(json) {\n    var resCount = 0,\n        officeCount = 0\n\n    pieGrid = JSON.parse(JSON.stringify(json.grid));\n    pieGrid.forEach(function (cell, index) {\n        delete cell.rot; //removes useless data \n        delete cell.x; //removes useless data \n        delete cell.y; //removes useless data \n        // delete cell.value; //removes useless data \n        cell.label = typeId[cell.type + 2]; //make 'Value' term for Desity, so d3plus will fill good \n\n        if (cell.type > 0 && cell.type < 3) {\n            resCount = resCount + 1;\n        } else if (cell.type > 3 && cell.type < 7) {\n            officeCount = officeCount + 1;\n        }\n    });\n}"]}