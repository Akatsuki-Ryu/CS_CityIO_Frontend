{"dependencies":[{"name":"/Volumes/WORK/GIT/17_CS_cityIO_Frontend/package.json","includedInParent":true,"mtime":1523842727247},{"name":"/Volumes/WORK/GIT/17_CS_cityIO_Frontend/node_modules/underscore.string/package.json","includedInParent":true,"mtime":1523842713290},{"name":"./helper/makeString","loc":{"line":6,"column":25}},{"name":"./rtrim","loc":{"line":7,"column":20}}],"generated":{"js":"/**\n * _s.prune: a more elegant version of truncate\n * prune extra chars, never leaving a half-chopped word.\n * @author github.com/rwz\n */\nvar makeString = require('./helper/makeString');\nvar rtrim = require('./rtrim');\n\nmodule.exports = function prune(str, length, pruneStr) {\n  str = makeString(str);\n  length = ~~length;\n  pruneStr = pruneStr != null ? String(pruneStr) : '...';\n\n  if (str.length <= length) return str;\n\n  var tmpl = function(c) {\n      return c.toUpperCase() !== c.toLowerCase() ? 'A' : ' ';\n    },\n    template = str.slice(0, length + 1).replace(/.(?=\\W*\\w*$)/g, tmpl); // 'Hello, world' -> 'HellAA AAAAA'\n\n  if (template.slice(template.length - 2).match(/\\w\\w/))\n    template = template.replace(/\\s*\\S+$/, '');\n  else\n    template = rtrim(template.slice(0, template.length - 1));\n\n  return (template + pruneStr).length > str.length ? str : str.slice(0, template.length) + pruneStr;\n};\n","map":{"mappings":[{"source":"node_modules/underscore.string/prune.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/underscore.string/prune.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/underscore.string/prune.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/underscore.string/prune.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/underscore.string/prune.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/underscore.string/prune.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/underscore.string/prune.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/underscore.string/prune.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/underscore.string/prune.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/underscore.string/prune.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/underscore.string/prune.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/underscore.string/prune.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/underscore.string/prune.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/underscore.string/prune.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/underscore.string/prune.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/underscore.string/prune.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/underscore.string/prune.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/underscore.string/prune.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/underscore.string/prune.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/underscore.string/prune.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/underscore.string/prune.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/underscore.string/prune.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/underscore.string/prune.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/underscore.string/prune.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/underscore.string/prune.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/underscore.string/prune.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/underscore.string/prune.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/underscore.string/prune.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}}],"sources":{"node_modules/underscore.string/prune.js":"/**\n * _s.prune: a more elegant version of truncate\n * prune extra chars, never leaving a half-chopped word.\n * @author github.com/rwz\n */\nvar makeString = require('./helper/makeString');\nvar rtrim = require('./rtrim');\n\nmodule.exports = function prune(str, length, pruneStr) {\n  str = makeString(str);\n  length = ~~length;\n  pruneStr = pruneStr != null ? String(pruneStr) : '...';\n\n  if (str.length <= length) return str;\n\n  var tmpl = function(c) {\n      return c.toUpperCase() !== c.toLowerCase() ? 'A' : ' ';\n    },\n    template = str.slice(0, length + 1).replace(/.(?=\\W*\\w*$)/g, tmpl); // 'Hello, world' -> 'HellAA AAAAA'\n\n  if (template.slice(template.length - 2).match(/\\w\\w/))\n    template = template.replace(/\\s*\\S+$/, '');\n  else\n    template = rtrim(template.slice(0, template.length - 1));\n\n  return (template + pruneStr).length > str.length ? str : str.slice(0, template.length) + pruneStr;\n};\n"},"lineCount":28}},"hash":"3d55e615107eb6a0f0b0e2f542271e0d","cacheData":{"env":{}}}