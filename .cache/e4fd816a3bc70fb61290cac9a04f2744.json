{"dependencies":[{"name":"/Volumes/WORK/GIT/17_CS_cityIO_Frontend/package.json","includedInParent":true,"mtime":1523925118628},{"name":"/Volumes/WORK/GIT/17_CS_cityIO_Frontend/node_modules/underscore.string/package.json","includedInParent":true,"mtime":1523925102776},{"name":"./helper/makeString","loc":{"line":1,"column":25}},{"name":"./helper/htmlEntities","loc":{"line":2,"column":27}}],"generated":{"js":"var makeString = require('./helper/makeString');\nvar htmlEntities = require('./helper/htmlEntities');\n\nmodule.exports = function unescapeHTML(str) {\n  return makeString(str).replace(/\\&([^;]+);/g, function(entity, entityCode) {\n    var match;\n\n    if (entityCode in htmlEntities) {\n      return htmlEntities[entityCode];\n    /*eslint no-cond-assign: 0*/\n    } else if (match = entityCode.match(/^#x([\\da-fA-F]+)$/)) {\n      return String.fromCharCode(parseInt(match[1], 16));\n    /*eslint no-cond-assign: 0*/\n    } else if (match = entityCode.match(/^#(\\d+)$/)) {\n      return String.fromCharCode(~~match[1]);\n    } else {\n      return entity;\n    }\n  });\n};\n","map":{"mappings":[{"source":"node_modules/underscore.string/unescapeHTML.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/underscore.string/unescapeHTML.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/underscore.string/unescapeHTML.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/underscore.string/unescapeHTML.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/underscore.string/unescapeHTML.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/underscore.string/unescapeHTML.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/underscore.string/unescapeHTML.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/underscore.string/unescapeHTML.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/underscore.string/unescapeHTML.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/underscore.string/unescapeHTML.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/underscore.string/unescapeHTML.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/underscore.string/unescapeHTML.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/underscore.string/unescapeHTML.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/underscore.string/unescapeHTML.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/underscore.string/unescapeHTML.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/underscore.string/unescapeHTML.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/underscore.string/unescapeHTML.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/underscore.string/unescapeHTML.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/underscore.string/unescapeHTML.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/underscore.string/unescapeHTML.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/underscore.string/unescapeHTML.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}}],"sources":{"node_modules/underscore.string/unescapeHTML.js":"var makeString = require('./helper/makeString');\nvar htmlEntities = require('./helper/htmlEntities');\n\nmodule.exports = function unescapeHTML(str) {\n  return makeString(str).replace(/\\&([^;]+);/g, function(entity, entityCode) {\n    var match;\n\n    if (entityCode in htmlEntities) {\n      return htmlEntities[entityCode];\n    /*eslint no-cond-assign: 0*/\n    } else if (match = entityCode.match(/^#x([\\da-fA-F]+)$/)) {\n      return String.fromCharCode(parseInt(match[1], 16));\n    /*eslint no-cond-assign: 0*/\n    } else if (match = entityCode.match(/^#(\\d+)$/)) {\n      return String.fromCharCode(~~match[1]);\n    } else {\n      return entity;\n    }\n  });\n};\n"},"lineCount":21}},"hash":"c776d8cde70772c641706f8345902a6a","cacheData":{"env":{}}}