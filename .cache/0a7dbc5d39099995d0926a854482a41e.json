{"dependencies":[{"name":"/Volumes/WORK/GIT/17_CS_cityIO_Frontend/package.json","includedInParent":true,"mtime":1523842727247},{"name":"/Volumes/WORK/GIT/17_CS_cityIO_Frontend/node_modules/underscore.string/package.json","includedInParent":true,"mtime":1523842713290},{"name":"./trim","loc":{"line":1,"column":19}}],"generated":{"js":"var trim = require('./trim');\n\nfunction boolMatch(s, matchers) {\n  var i, matcher, down = s.toLowerCase();\n  matchers = [].concat(matchers);\n  for (i = 0; i < matchers.length; i += 1) {\n    matcher = matchers[i];\n    if (!matcher) continue;\n    if (matcher.test && matcher.test(s)) return true;\n    if (matcher.toLowerCase() === down) return true;\n  }\n}\n\nmodule.exports = function toBoolean(str, trueValues, falseValues) {\n  if (typeof str === 'number') str = '' + str;\n  if (typeof str !== 'string') return !!str;\n  str = trim(str);\n  if (boolMatch(str, trueValues || ['true', '1'])) return true;\n  if (boolMatch(str, falseValues || ['false', '0'])) return false;\n};\n","map":{"mappings":[{"source":"node_modules/underscore.string/toBoolean.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/underscore.string/toBoolean.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/underscore.string/toBoolean.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/underscore.string/toBoolean.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/underscore.string/toBoolean.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/underscore.string/toBoolean.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/underscore.string/toBoolean.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/underscore.string/toBoolean.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/underscore.string/toBoolean.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/underscore.string/toBoolean.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/underscore.string/toBoolean.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/underscore.string/toBoolean.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/underscore.string/toBoolean.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/underscore.string/toBoolean.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/underscore.string/toBoolean.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/underscore.string/toBoolean.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/underscore.string/toBoolean.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/underscore.string/toBoolean.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/underscore.string/toBoolean.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/underscore.string/toBoolean.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/underscore.string/toBoolean.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}}],"sources":{"node_modules/underscore.string/toBoolean.js":"var trim = require('./trim');\n\nfunction boolMatch(s, matchers) {\n  var i, matcher, down = s.toLowerCase();\n  matchers = [].concat(matchers);\n  for (i = 0; i < matchers.length; i += 1) {\n    matcher = matchers[i];\n    if (!matcher) continue;\n    if (matcher.test && matcher.test(s)) return true;\n    if (matcher.toLowerCase() === down) return true;\n  }\n}\n\nmodule.exports = function toBoolean(str, trueValues, falseValues) {\n  if (typeof str === 'number') str = '' + str;\n  if (typeof str !== 'string') return !!str;\n  str = trim(str);\n  if (boolMatch(str, trueValues || ['true', '1'])) return true;\n  if (boolMatch(str, falseValues || ['false', '0'])) return false;\n};\n"},"lineCount":21}},"hash":"836be030fc7e09d8fd84f3f5c994e391","cacheData":{"env":{}}}