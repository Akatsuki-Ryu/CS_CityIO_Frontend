{"dependencies":[{"name":"/Volumes/WORK/GIT/17_CS_cityIO_Frontend/package.json","includedInParent":true,"mtime":1523925118628},{"name":"/Volumes/WORK/GIT/17_CS_cityIO_Frontend/node_modules/combine-source-map/package.json","includedInParent":true,"mtime":1523925102997},{"name":"process"}],"generated":{"js":"var process = require(\"process\");\n'use strict';\n\nfunction posix(path) {\n\treturn path.charAt(0) === '/';\n};\n\nfunction win32(path) {\n\t// https://github.com/joyent/node/blob/b3fcc245fb25539909ef1d5eaa01dbf92e168633/lib/path.js#L56\n\tvar splitDeviceRe = /^([a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/]+[^\\\\\\/]+)?([\\\\\\/])?([\\s\\S]*?)$/;\n\tvar result = splitDeviceRe.exec(path);\n\tvar device = result[1] || '';\n\tvar isUnc = !!device && device.charAt(1) !== ':';\n\n\t// UNC paths are always absolute\n\treturn !!result[2] || isUnc;\n};\n\nmodule.exports = process.platform === 'win32' ? win32 : posix;\nmodule.exports.posix = posix;\nmodule.exports.win32 = win32;","map":{"mappings":[{"source":"node_modules/combine-source-map/lib/path-is-absolute.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/combine-source-map/lib/path-is-absolute.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/combine-source-map/lib/path-is-absolute.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/combine-source-map/lib/path-is-absolute.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/combine-source-map/lib/path-is-absolute.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/combine-source-map/lib/path-is-absolute.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/combine-source-map/lib/path-is-absolute.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/combine-source-map/lib/path-is-absolute.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/combine-source-map/lib/path-is-absolute.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/combine-source-map/lib/path-is-absolute.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/combine-source-map/lib/path-is-absolute.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/combine-source-map/lib/path-is-absolute.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/combine-source-map/lib/path-is-absolute.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/combine-source-map/lib/path-is-absolute.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/combine-source-map/lib/path-is-absolute.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/combine-source-map/lib/path-is-absolute.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/combine-source-map/lib/path-is-absolute.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/combine-source-map/lib/path-is-absolute.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/combine-source-map/lib/path-is-absolute.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/combine-source-map/lib/path-is-absolute.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}}],"sources":{"node_modules/combine-source-map/lib/path-is-absolute.js":"'use strict';\n\nfunction posix(path) {\n\treturn path.charAt(0) === '/';\n};\n\nfunction win32(path) {\n\t// https://github.com/joyent/node/blob/b3fcc245fb25539909ef1d5eaa01dbf92e168633/lib/path.js#L56\n\tvar splitDeviceRe = /^([a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/]+[^\\\\\\/]+)?([\\\\\\/])?([\\s\\S]*?)$/;\n\tvar result = splitDeviceRe.exec(path);\n\tvar device = result[1] || '';\n\tvar isUnc = !!device && device.charAt(1) !== ':';\n\n\t// UNC paths are always absolute\n\treturn !!result[2] || isUnc;\n};\n\nmodule.exports = process.platform === 'win32' ? win32 : posix;\nmodule.exports.posix = posix;\nmodule.exports.win32 = win32;"},"lineCount":21}},"hash":"5c5f453868523c4b49c3125871de5988","cacheData":{"env":{}}}